cache_key: 1426434638790/e51ded00d36136ed4482217788951d4c-shell
error: null
result: '0'
stderr: ''
stdout: "\nUSAGE: \n\n   linpmem  [--elf] [-m] [-p </path/to/pagefile>] ...  [-V]\
  \ [-d] [-v] [-t]\n            [-i </path/to/file/or/device>] ...  [-e <string>]\
  \ [-o\n            </path/to/file>] [-c <zlib, snappy, none>] [--] [--version]\n\
  \            [-h] </path/to/aff4/volume> ...\n\n\nWhere: \n\n   --elf\n     Normally\
  \ pmem will produce an AFF4 volume but this option will force\n     an ELF Core\
  \ image file to be produced during acquisition. Note that\n     this option is not\
  \ compatible with the --input or --pagefile options\n     because we can not write\
  \ multiple streams into an ELF file.\n\n     This option is mostly useful for compatibility\
  \ with legacy memory\n     analysis tools which do not understand AFF4 images.\n\
  \n     If this option is used together with the --export option we will\n     export\
  \ an ELF file from a stream within the AFF4 image.\n\n   -m,  --acquire-memory\n\
  \     Normally pmem will only acquire memory if the user has not asked for\n   \
  \  something else (like acquiring files, exporting etc). This option\n     forces\
  \ memory to be acquired. It is only required when the program is\n     invoked with\
  \ the --input, --export or other actionable flags.\n\n\n   -p </path/to/pagefile>,\
  \  --pagefile </path/to/pagefile>  (accepted\n      multiple times)\n     Also capture\
  \ the pagefile. Note that you must provide this option\n     rather than e.g. '--input\
  \ c:\\pagefile.sys' because we can not normally\n     read the pagefile directly.\
  \ This option will use the sleuthkit to read\n     the pagefile.\n\n   -V,  --view\n\
  \     View AFF4 metadata\n\n   -d,  --debug\n     Display debugging logging\n\n\
  \   -v,  --verbose\n     Display more verbose information\n\n   -t,  --truncate\n\
  \     Truncate the output file. Normally volumes and images are appended to\n  \
  \   existing files, but this flag forces the output file to be truncated\n     first.\n\
  \n   -i </path/to/file/or/device>,  --input </path/to/file/or/device> \n      (accepted\
  \ multiple times)\n     File to image. If specified we copy this file to the output\
  \ volume\n     located at --output. If there is no AFF4 volume on --output yet,\
  \ we\n     create a new volume on it.\n\n     This can be specified multiple times\
  \ with shell expansion. e.g.:\n\n     -i /bin/*\n\n   -e <string>,  --export <string>\n\
  \     Name of the stream to export. If specified we try to open this stream\n  \
  \   and write it to the --output file. Note that you will also need to\n     specify\
  \ an AFF4 volume path to load so we know where to find the\n     stream. Specifying\
  \ a relative URN implies a stream residing in a\n     loaded volume. E.g.\n\n  \
  \   -e /dev/sda -o /tmp/myfile my_volume.aff4\n\n   -o </path/to/file>,  --output\
  \ </path/to/file>\n     Output file to write to. If the file does not exist we create\
  \ it.\n\n   -c <zlib, snappy, none>,  --compression <zlib, snappy, none>\n     Type\
  \ of compression to use (default zlib).\n\n   --,  --ignore_rest\n     Ignores the\
  \ rest of the labeled arguments following this flag.\n\n   --version\n     Displays\
  \ version information and exits.\n\n   -h,  --help\n     Displays usage information\
  \ and exits.\n\n   </path/to/aff4/volume>  (accepted multiple times)\n     These\
  \ AFF4 Volumes will be loaded and their metadata will be parsed\n     before the\
  \ program runs.\n\n     Note that this is necessary before you can extract streams\
  \ with the\n     --export flag.\n\n\n   The LinuxPmem memory imager.  Copyright\
  \ 2014 Google Inc.\n\n"
