- id: 1426860112775
  source: []
  type: markdown
- id: 1426860261852
  source:
  - '# Linux Memory Forensics'
  - In this chapter we give an overview on Linux memory forensics. We show how to
    create profiles for Linux hosts and give a quick overview on kernel data structures.
    Finally, we explain some common Linux kernel rootkit techniques and how to analyze
    them using Rekall.
  type: markdown
- id: 1426861176884
  source:
  - '## Kernel Builds'
  - ''
  - In contrast to Windows and OS X, the Linux kernel is open source and can be custom
    built by the user or distributor. In addition to a large number of different kernel
    source versions, the kernel allows for extensive configuration when built, which
    lead to parts of code and data structures being excluded from the binary. This
    alters the binary layout of data structures, requiring a profile for each possible
    combination of version and configuration.
  - ''
  - There are many different distributions with different kernel versions and configurations
    per release, resulting in a huge number of disparate binary kernels. While there
    is a [commercial product](https://secondlookforensics.com/)  maintaining a large
    number of reference kernels (14000 as of March 2015), no free solution exists
    at the time of writing.
  type: markdown
- id: 1426860709558
  source:
  - '## Profiles'
  - ''
  - To analyze a memory image from a Linux system, we first have to obtain a profile
    that enables Rekall to interpret the kernels data structures. There is a small
    number of Linux profiles in the [Rekall profile repository](http://profiles.rekall-forensic.com/),
    however, in most cases we will have to build a custom profile ourselves.
  - ''
  - 'A Linux profile is built from two things:'
  - ''
  - '* The contents of the */boot/System.map* file, which provides us with the address
    of all kernel symbols'
  - '* Debugging information from a *dummy* kernel module built for the running kernel.
    This provides us with information on the layout of the kernels data structures.'
  - ''
  - To create a Linux profile, use the provided module and makefile from 'tools/linux'
    in the Rekall source tree (provided in this lessons 'profile' directory for convenience).
  type: markdown
- id: 1427032097773
  source: sudo make -C profile profile
  type: shell
- id: 1427032475414
  source:
  - This will build the module stub and package it into a zip archive, together with
    the System.map file and kernel config for processing.
  type: markdown
- id: 1427032537527
  source: unzip -l profile/3.13.0-45-generic.zip
  type: shell
- id: 1427032601595
  source:
  - We can use this archive to create a profile for this kernel version on our analysis
    system.
  type: markdown
- id: 1427033875643
  source: rekal convert_profile profile/3.13.0-45-generic.zip profile/3.13.0-45-generic
  type: shell
- id: 1427032795761
  source:
  - The resulting profile is a json file, and can directly be used by invoking Rekall
    with the '-p PATH_TO_PROFILE' option' .
  type: markdown
- id: 1427032851656
  source: rekal -p profile/3.13.0-45-generic
  type: shell
- id: 1427035184206
  source:
  - You can also add the directory which stores the profile to your local profile
    path in your '~.rekallrc'
  type: markdown
- id: 1427035259891
  source: cat ~/.rekallrc
  type: shell
- id: 1426861038785
  source:
  - '## Memory Acquisition'
  - ''
  - Depending on the platform, there are multiple ways to acquire memory from Linux
    systems, some from kernel mode and some from user mode.
  - ''
  - '### User Mode'
  - 'The Linux kernel contains two mechanisms that export physical memory to user
    mode:'
  - ''
  - '* **/dev/mem** is available on most Linux systems and exports physical memory
    with a file-like interface to usermode. Unfortunately, almost all kernels have
    CONFIG_STRICT_DEVMEM enabled, which blocks access to most memory regions on this
    device for security reasons.'
  - '* **/proc/kcore** exports the kernels state as a read-only ELF core dump. It
    is enabled on many distributions to allow for limited local kernel debugging.
    Since the kernel [maps all physical memory on x86-64 systems](https://www.kernel.org/doc/Documentation/x86/x86_64/mm.txt),
    it is possible to create a physical memory dump by copying these sections. The
    Linux version of pmem uses this mechanism to access physical memory.'
  - ''
  - '### Kernel Mode'
  - When non of the user mode interfaces are available, we must load a kernel module
    that provides us with access to physical memory.
  - ''
  - '* **[LiME](https://github.com/504ensicsLabs/LiME)** creates a memory image directly
    from kernel mode over the network or to the local disk. It must be built on a
    system with an identical kernel configuration and version as the target system,
    as it uses a number of kernel APIs to interact with memory, the network and persistent
    storage.'
  - '* **[LMAP](https://github.com/google/rekall/tree/master/tools/linux/lmap)** was
    created to allow investigators to dump memory from kernel mode without previous
    knowledge of the kernel version and configuration. It requires no preparation
    and is distributed as a statically linked ELF binary. When run on a system it
    locates a binary compatible kernel module on the target system and instruments
    its data structures to interface with the running kernel. LMAP does not use the
    kernel for memory access, but performs memory mapping itself with a technique
    called [PTE remapping](http://www.dfrws.org/2013/proceedings/DFRWS2013-13.pdf).'
  type: markdown
- id: 1427056160716
  source:
  - '## The iomem resource tree'
  - ''
  - It is important to be aware of the physical memory layout and how it has been
    enumerated, to make sure malicious software has not hidden memory regions from
    acquisition. The *iomem\_resource* tree is a Linux kernel data structure that
    manages the layout of the physical address space. It can be accessed from user
    space by reading the */proc/iomem* file.
  type: markdown
- id: 1427056311614
  source: cat /proc/iomem
  type: shell
- id: 1427056322369
  source:
  - The *iomem* plugin walks the iomem resource tree and enumerates all physical memory
    regions. This should be checked for consistency, as malicious software can easily
    manipulate this data structure to make certain regions immune to memory acquisition.
    Both LiME and LMAP use this data structure to determine the regions of memory
    to acquire, and restrict the image to "System RAM" regions. Simply renaming a
    region to something else, like "System ROM" will exempt them from acquisition.
    More sophisticated strategies will split a region in two and leave out only the
    pages that malicious software is trying to hide.
  type: markdown
- id: 1427056327758
  source:
    arguments: {}
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      description: mimics /proc/iomem.
      name: iomem
      requirements:
      - profile
      - physical_address_space
      short_description: mimics /proc/iomem.
    session_id: 1
  type: rekallplugin
- id: 1426868564145
  source:
  - '## Kernel Rootkits'
  - ''
  - 'In this section we give a short overview on the most common kernel rootkit techniques
    for Linux, and how to spot them when analyzing a Linux memory image with Rekall. '
  - ''
  - '### Loadable Kernel Modules'
  - Kernel modules are the standard method for loading code into the kernel, which
    is why they are often abused by rootkits. Information on loaded modules can be
    found in '/proc/modules', as well as in '/sys/module'. The 'lsmod' program obtains
    it's information from these two sources.
  type: markdown
- id: 1427037301227
  source: lsmod
  type: shell
- id: 1427037657952
  source:
  - A malicious kernel module could hook the 'open' and 'read' syscalls and filter
    the view lsmod has of these files. However, the kernel maintains a linked list
    of all loaded kernel modules. Rekalls 'lsmod' plugin traverses this list to identify
    all loaded kernel modules. Discrepancies in the output of the usermode 'lsmod'
    and the 'lsmod' plugin can indicate an infection.
  type: markdown
- id: 1427037315292
  source:
    arguments: {}
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      - default: false
        help: Display section addresses.
        name: sections
        positional: false
        short_opt: S
        type: Boolean
      - default: false
        help: Display module parameters.
        name: parameters
        positional: false
        short_opt: P
        type: Boolean
      description: Gathers loaded kernel modules.
      name: lsmod
      requirements:
      - profile
      - physical_address_space
      short_description: Gathers loaded kernel modules.
    session_id: 1
  type: rekallplugin
- id: 1427038057503
  source:
  - Since the kernel only uses the module list for bookkeeping, it is possible for
    a rogue module to unlink itself from this list. We can leverage the fact that
    module loading also leaves traces in sysfs to discover modules using this technique.
  - ''
  - Sysfs contains a 'module_kset' container with references to all loaded modules.
    The 'check_modules' plugin enumerates this container and checks if all modules
    in the set are also linked into the module list. A module that appears in the
    module kset but not in the module list is suspicious.
  type: markdown
- id: 1427038278772
  source:
    arguments: {}
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      description: "Compares module list to sysfs info, if available.\n\n    Sysfs\
        \ contains a kset objects for a number of kernel objects (kobjects). One\n\
        \    of the ksets is the \"module_kset\" which holds references to all loaded\n\
        \    kernel modules.\n\n    Each struct module object holds within it a kobj\
        \ struct for reference\n    counting. This object is referenced both from\
        \ the struct module and the\n    sysfs kset.\n\n    This plugin traverses\
        \ the kset and resolves the kobj back to its containing\n    object (which\
        \ is the struct module itself). We then compare the struct\n    module with\
        \ the list of known modules (which is obtained by traversing the\n    module's\
        \ list member). So if a module were to simply unlink itself from the\n   \
        \ list, it would still be found by its reference from sysfs.\n    "
      name: check_modules
      requirements:
      - profile
      - physical_address_space
      short_description: Compares module list to sysfs info, if available.
    session_id: 1
  type: rekallplugin
- id: 1427038761688
  source:
  - We can dump suspicious modules to disk for analysis with the 'moddump' plugin.
    Note that this will just dump the binary module from memory, which has already
    been relocated etc. This will not result in a valid ELF .ko file.
  type: markdown
- id: 1427038729502
  source:
    arguments:
      dump_dir: modules
      regexp: rootkit
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      - default: null
        help: Dump directory.
        name: dump_dir
        positional: false
        required: true
        short_opt: ''
      - default: null
        help: Regexp on the module name.
        name: regexp
        positional: false
        short_opt: ''
      description: Dumps loaded kernel modules.
      name: moddump
      requirements:
      - profile
      - physical_address_space
      short_description: Dumps loaded kernel modules.
    session_id: 1
  type: rekallplugin
- id: 1426868592001
  source:
  - '## System Calls'
  - ''
  - 'User-mode programs interact with the kernel using system calls. There are three
    main syscall interfaces on x86:'
  - ''
  - '* *INT 0x80* with the syscall number in *EAX* is the oldest syscall mechanism
    and still enabled on most kernels to allow for compatibility with legacy software.
    Syscalls are issued by invoking a synchronous interrupt. Interrupt vector 0x80
    points to the syscall handler, which parses the value of *EAX*, and dispatches
    the call to the correct syscall handler using the *sys\_call\_table*.'
  - '* *SYSENTER* is a mechanism to directly call into the kernel without the need
    for an interrupt. The OS stores the address of the syscall handler as well as
    the stack and code segment descriptors directly in the cpu inside a Machine Specific
    Register (MSR). When the *SYSENTER* instruction is issued the CPU traps directly
    into the syscall handler. This mechanism is also used for 32 bit code only.'
  - '* *SYSCALL* is the standard system call mechanism for x86-64 systems. Similarly
    to *SYSENTER*, the OS stores stack, segment and syscall handler inside specific
    MSRs (*LSTAR*, etc), which are then used to directly trap into the syscall handler
    when the *SYSCALL* instruction is issued.'
  - ''
  - Regardless of the interface used, the syscall handler parses the *sys\_call\_table*
    to obtain the handler responsible for this specific call. There are two syscall
    tables, on for 32 bit and one for 64 bit code (*ia32\_sys\_call\_table and sys\_call\_table).
  type: markdown
- id: 1426870956952
  source:
  - '### Interrupt Descriptor Table Hooks'
  - ''
  - On systems that used the *INT 0x80* syscall mechanism, rootkits could patch the
    *IDT* to hook into the syscall handler. By installing a malicious syscall handler,
    software can intercept and filter all syscalls.
  - ''
  - The *check_idt* plugin walks the *IDT* and looks up the symbol for each entry.
    If an *IDT* entry is not a valid kernel symbol this indicates that something manipulated
    the *IDT*. For example, entry 128 (0x80) must point to *ia32_syscall* on x86-64
    systems.
  type: markdown
- id: 1426870971190
  source:
    arguments: {}
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      description: ' Checks if the IDT has been altered '
      name: check_idt
      requirements:
      - profile
      - physical_address_space
      short_description: ' Checks if the IDT has been altered '
    session_id: 1
  type: rekallplugin
- id: 1426870963552
  source:
  - '### Syscall Table Hooks'
  - ''
  - Because modern x86-64 systems do not use synchronous interrupts for syscall dispatching,
    hooking the *IDT* is pretty pointless if a rootkit wants to subvert the entire
    system, and not only legacy 32 bit code.
  - ''
  - However, because the syscall handler consults *sys\_call\_table* (*ia32\_sys\_call\_table
    for 32 bit syscalls) to dispatch the system call, malicious software can replace
    individual pointers in the syscall table to hook specific syscalls.
  - ''
  - The *check\_syscall* plugin walks both syscall tables and resolves the symbol
    for each entry. Any symbol that is not in the kernel is a red flag here.
  type: markdown
- id: 1426872613264
  source:
    arguments: {}
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      description: Checks if the system call table has been altered.
      name: check_syscall
      requirements:
      - profile
      - physical_address_space
      short_description: Checks if the system call table has been altered.
    session_id: 1
  type: rekallplugin
- id: 1427041644403
  source:
  - '## Processes'
  - ''
  - The 'ps' user-space program obtains its information from '/proc/$PID'. It can
    easily be fooled by hooking *getdents* in '/proc', enabling malicious software
    to hide processes from user-mode tools.
  type: markdown
- id: 1427051313170
  source: ps
  type: shell
- id: 1427051321863
  source:
  - The kernel manages processes in a list of tasks, called the *task list*. This
    is a doubly linked list of *struct task\_struct* objects, which each represent
    a process. The *init\_task* is the first process spawned on boot, all other processes
    are linked into the same list.
  type: markdown
- id: 1427055163619
  source:
    caption: ''
    files:
    - name: task list.jpg
      type: image/jpeg
    size: 1
  type: fileupload
- id: 1427055335259
  source:
  - The *pslist* plugin enumerates all running processes by walking the task list
    in the memory image. This will reveal any processes that have been hidden by hooks
    in '/proc'. Since the task list also contains kernel threads, we need to differentiate
    between them and user mode processes. Kernel threads don't have a DTB, which allows
    us to identify them easily.
  type: markdown
- id: 1427050388640
  source:
    arguments: {}
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      - help: One or more pids of processes to select.
        name: pid
        positional: false
        short_opt: ''
        type: ArrayIntParser
      - default: null
        help: A regex to select a process by name.
        name: proc_regex
        positional: false
        short_opt: ''
      - help: Physical addresses of task structs.
        name: phys_task
        positional: false
        short_opt: ''
        type: ArrayIntParser
      - help: Kernel addresses of task structs.
        name: task
        positional: false
        short_opt: ''
        type: ArrayIntParser
      - help: Use this as the first task to follow the list.
        name: task_head
        positional: false
        short_opt: ''
        type: IntParser
      - choices:
        - InitTask
        help: Method to list processes (Default uses all methods).
        name: method
        nargs: +
        positional: false
        short_opt: ''
      description: "Gathers active tasks by walking the task_struct->task list.\n\n\
        \    It does not display the swapper process. If the DTB column is blank,\
        \ the\n    item is likely a kernel thread.\n    "
      name: pslist
      requirements:
      - profile
      - physical_address_space
      short_description: Gathers active tasks by walking the task_struct->task list.
    session_id: 1
  type: rekallplugin
- id: 1426868635349
  source:
  - '## Inodes'
  - ''
  - The Linux kernel maintains a virtual filesystem (VFS) tree, into which all files
    and directories are mounted. The central bookkeeping data structure for a node
    in the VFS tree is the inode. An inode contains references to file related information,
    eg. the superblock, timestamps, and file operations.
  type: markdown
- id: 1426868643047
  source:
  - '## File Operations'
  - ''
  - File operations are data structures that dispatch operations on a specific file
    to functions in the kernel. For example, among others, a regular file has pointers
    to llseek, read, write and open functions in its *file\_operations* data structure.
  - ''
  - Since the *file\_operations* data structure is just an array of pointers, it is
    trivial for malicious software to hook into file system operations of specific
    files or directories, by overwriting pointers in the files *file\_operations*
    structure. Since many user-mode tools like lsmod, ps, netstat and lsof obtain
    their information from files in '/proc', hooking their *file\_operations* allows
    a rootkit to hide modules, processes, network connections and file descriptors
    from live analysis.
  - ''
  - The *check\_proc\_fops* plugin walks the file operations of all files in '/proc'
    and resolves the module containing the handler for each operation. Handlers that
    belong to a kernel module for important files like 'proc/modules' can indicate
    a compromise, especially if the module is hidden and Rekall can't resolve the
    symbol.
  type: markdown
- id: 1426871091701
  source:
    arguments:
      all: true
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      - default: false
        help: Specify to see all the fops, even if they are known.
        name: all
        positional: false
        short_opt: ''
        type: Boolean
      description: Checks the proc filesystem for hooked f_ops.
      name: check_proc_fops
      requirements:
      - profile
      - physical_address_space
      short_description: Checks the proc filesystem for hooked f_ops.
    session_id: 1
  type: rekallplugin
- id: 1427041741019
  source:
  - Operations on open files of a task are also dispatched using file operations.
    Malicious software can hook into file system operations of specific processes
    by overwriting pointers here. The *check\_task\_fops* plugin enumerates the file
    operations for all open files of all tasks and resolves the handler symbol.
  type: markdown
- id: 1426871124035
  source:
    arguments:
      all: true
      pid:
      - 2601
    plugin:
      arguments:
      - critical: true
        help: Name of the profile to load. This is the filename of the profile found
          in the profiles directory. Profiles are searched in the profile path order.
        name: profile
        positional: false
        short_opt: p
      - help: The DTB physical address.
        name: dtb
        positional: false
        short_opt: ''
        type: IntParser
      - help: One or more pids of processes to select.
        name: pid
        positional: false
        short_opt: ''
        type: ArrayIntParser
      - default: null
        help: A regex to select a process by name.
        name: proc_regex
        positional: false
        short_opt: ''
      - help: Physical addresses of task structs.
        name: phys_task
        positional: false
        short_opt: ''
        type: ArrayIntParser
      - help: Kernel addresses of task structs.
        name: task
        positional: false
        short_opt: ''
        type: ArrayIntParser
      - help: Use this as the first task to follow the list.
        name: task_head
        positional: false
        short_opt: ''
        type: IntParser
      - choices:
        - InitTask
        help: Method to list processes (Default uses all methods).
        name: method
        nargs: +
        positional: false
        short_opt: ''
      - default: false
        help: Specify to see all the fops, even if they are known.
        name: all
        positional: false
        short_opt: ''
        type: Boolean
      description: Check open files in tasks for f_ops modifications.
      name: check_task_fops
      requirements:
      - profile
      - physical_address_space
      short_description: Check open files in tasks for f_ops modifications.
    session_id: 1
  type: rekallplugin
